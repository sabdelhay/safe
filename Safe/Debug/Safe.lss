
Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000daa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000daa  00000e3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000ca  008000ca  00000ea8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cb7  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00002d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd7  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000048b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e5  00000000  00000000  00004b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e93  00000000  00000000  00005179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	ec 00       	.word	0x00ec	; ????
  56:	05 01       	movw	r0, r10
  58:	1e 01       	movw	r2, r28
  5a:	37 01       	movw	r6, r14
  5c:	4f 01       	movw	r8, r30
  5e:	4f 01       	movw	r8, r30
  60:	4f 01       	movw	r8, r30
  62:	4f 01       	movw	r8, r30
  64:	4f 01       	movw	r8, r30
  66:	4f 01       	movw	r8, r30
  68:	4f 01       	movw	r8, r30
  6a:	4f 01       	movw	r8, r30
  6c:	4f 01       	movw	r8, r30
  6e:	4f 01       	movw	r8, r30
  70:	4f 01       	movw	r8, r30
  72:	4f 01       	movw	r8, r30
  74:	4f 01       	movw	r8, r30
  76:	4f 01       	movw	r8, r30
  78:	4f 01       	movw	r8, r30
  7a:	4f 01       	movw	r8, r30
  7c:	4f 01       	movw	r8, r30
  7e:	4f 01       	movw	r8, r30
  80:	4f 01       	movw	r8, r30
  82:	4f 01       	movw	r8, r30
  84:	4f 01       	movw	r8, r30
  86:	4f 01       	movw	r8, r30
  88:	4f 01       	movw	r8, r30
  8a:	4f 01       	movw	r8, r30
  8c:	4f 01       	movw	r8, r30
  8e:	4f 01       	movw	r8, r30
  90:	4f 01       	movw	r8, r30
  92:	4f 01       	movw	r8, r30
  94:	ec 00       	.word	0x00ec	; ????
  96:	05 01       	movw	r0, r10
  98:	1e 01       	movw	r2, r28
  9a:	37 01       	movw	r6, r14
  9c:	5c 01       	movw	r10, r24
  9e:	75 01       	movw	r14, r10
  a0:	8e 01       	movw	r16, r28
  a2:	a7 01       	movw	r20, r14
  a4:	bf 01       	movw	r22, r30
  a6:	bf 01       	movw	r22, r30
  a8:	bf 01       	movw	r22, r30
  aa:	bf 01       	movw	r22, r30
  ac:	bf 01       	movw	r22, r30
  ae:	bf 01       	movw	r22, r30
  b0:	bf 01       	movw	r22, r30
  b2:	bf 01       	movw	r22, r30
  b4:	bf 01       	movw	r22, r30
  b6:	bf 01       	movw	r22, r30
  b8:	bf 01       	movw	r22, r30
  ba:	bf 01       	movw	r22, r30
  bc:	bf 01       	movw	r22, r30
  be:	bf 01       	movw	r22, r30
  c0:	bf 01       	movw	r22, r30
  c2:	bf 01       	movw	r22, r30
  c4:	bf 01       	movw	r22, r30
  c6:	bf 01       	movw	r22, r30
  c8:	bf 01       	movw	r22, r30
  ca:	bf 01       	movw	r22, r30
  cc:	bf 01       	movw	r22, r30
  ce:	bf 01       	movw	r22, r30
  d0:	bf 01       	movw	r22, r30
  d2:	bf 01       	movw	r22, r30
  d4:	bf 01       	movw	r22, r30
  d6:	bf 01       	movw	r22, r30
  d8:	bf 01       	movw	r22, r30
  da:	bf 01       	movw	r22, r30
  dc:	5c 01       	movw	r10, r24
  de:	75 01       	movw	r14, r10
  e0:	8e 01       	movw	r16, r28
  e2:	a7 01       	movw	r20, r14
  e4:	cc 01       	movw	r24, r24
  e6:	de 01       	movw	r26, r28
  e8:	f0 01       	movw	r30, r0
  ea:	02 02       	muls	r16, r18
  ec:	14 02       	muls	r17, r20
  ee:	14 02       	muls	r17, r20
  f0:	14 02       	muls	r17, r20
  f2:	14 02       	muls	r17, r20
  f4:	14 02       	muls	r17, r20
  f6:	14 02       	muls	r17, r20
  f8:	14 02       	muls	r17, r20
  fa:	14 02       	muls	r17, r20
  fc:	14 02       	muls	r17, r20
  fe:	14 02       	muls	r17, r20
 100:	14 02       	muls	r17, r20
 102:	14 02       	muls	r17, r20
 104:	14 02       	muls	r17, r20
 106:	14 02       	muls	r17, r20
 108:	14 02       	muls	r17, r20
 10a:	14 02       	muls	r17, r20
 10c:	14 02       	muls	r17, r20
 10e:	14 02       	muls	r17, r20
 110:	14 02       	muls	r17, r20
 112:	14 02       	muls	r17, r20
 114:	14 02       	muls	r17, r20
 116:	14 02       	muls	r17, r20
 118:	14 02       	muls	r17, r20
 11a:	14 02       	muls	r17, r20
 11c:	14 02       	muls	r17, r20
 11e:	14 02       	muls	r17, r20
 120:	14 02       	muls	r17, r20
 122:	14 02       	muls	r17, r20
 124:	cc 01       	movw	r24, r24
 126:	de 01       	movw	r26, r28
 128:	f0 01       	movw	r30, r0
 12a:	02 02       	muls	r16, r18
 12c:	22 02       	muls	r18, r18
 12e:	3b 02       	muls	r19, r27
 130:	54 02       	muls	r21, r20
 132:	6d 02       	muls	r22, r29
 134:	85 02       	muls	r24, r21
 136:	85 02       	muls	r24, r21
 138:	85 02       	muls	r24, r21
 13a:	85 02       	muls	r24, r21
 13c:	85 02       	muls	r24, r21
 13e:	85 02       	muls	r24, r21
 140:	85 02       	muls	r24, r21
 142:	85 02       	muls	r24, r21
 144:	85 02       	muls	r24, r21
 146:	85 02       	muls	r24, r21
 148:	85 02       	muls	r24, r21
 14a:	85 02       	muls	r24, r21
 14c:	85 02       	muls	r24, r21
 14e:	85 02       	muls	r24, r21
 150:	85 02       	muls	r24, r21
 152:	85 02       	muls	r24, r21
 154:	85 02       	muls	r24, r21
 156:	85 02       	muls	r24, r21
 158:	85 02       	muls	r24, r21
 15a:	85 02       	muls	r24, r21
 15c:	85 02       	muls	r24, r21
 15e:	85 02       	muls	r24, r21
 160:	85 02       	muls	r24, r21
 162:	85 02       	muls	r24, r21
 164:	85 02       	muls	r24, r21
 166:	85 02       	muls	r24, r21
 168:	85 02       	muls	r24, r21
 16a:	85 02       	muls	r24, r21
 16c:	22 02       	muls	r18, r18
 16e:	3b 02       	muls	r19, r27
 170:	54 02       	muls	r21, r20
 172:	6d 02       	muls	r22, r29

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ea ea       	ldi	r30, 0xAA	; 170
 188:	fd e0       	ldi	r31, 0x0D	; 13
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	aa 3c       	cpi	r26, 0xCA	; 202
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	aa ec       	ldi	r26, 0xCA	; 202
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	a1 3d       	cpi	r26, 0xD1	; 209
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <main>
 1aa:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <button_init>:
 *  Author: sherif
 */ 
#include "DIO.h"

void button_init(char port, char pin){
	DIO_setpindir(port, pin, 0);
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
 1b8:	08 95       	ret

000001ba <button_read>:
}


char button_read(char port, char pin){
	char button_state;
	button_state = DIO_read(port, pin);
 1ba:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_read>
	return button_state;
}
 1be:	08 95       	ret

000001c0 <DIO_setpindir>:
		case 'c':
		PORTC=val; 
		break ;
		case 'D':
		case 'd':
		PORTD=val; 
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	e1 54       	subi	r30, 0x41	; 65
 1c6:	f1 09       	sbc	r31, r1
 1c8:	e4 32       	cpi	r30, 0x24	; 36
 1ca:	f1 05       	cpc	r31, r1
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <DIO_setpindir+0x10>
 1ce:	67 c0       	rjmp	.+206    	; 0x29e <DIO_setpindir+0xde>
 1d0:	e6 5d       	subi	r30, 0xD6	; 214
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__tablejump2__>
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	59 f4       	brne	.+22     	; 0x1f2 <DIO_setpindir+0x32>
 1dc:	2a b3       	in	r18, 0x1a	; 26
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_setpindir+0x28>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_setpindir+0x24>
 1ec:	82 2b       	or	r24, r18
 1ee:	8a bb       	out	0x1a, r24	; 26
 1f0:	08 95       	ret
 1f2:	2a b3       	in	r18, 0x1a	; 26
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_setpindir+0x3e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_setpindir+0x3a>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	8a bb       	out	0x1a, r24	; 26
 208:	08 95       	ret
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_setpindir+0x64>
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_setpindir+0x5a>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_setpindir+0x56>
 21e:	82 2b       	or	r24, r18
 220:	87 bb       	out	0x17, r24	; 23
 222:	08 95       	ret
 224:	27 b3       	in	r18, 0x17	; 23
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_setpindir+0x70>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_setpindir+0x6c>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	87 bb       	out	0x17, r24	; 23
 23a:	08 95       	ret
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_setpindir+0x96>
 240:	24 b3       	in	r18, 0x14	; 20
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_setpindir+0x8c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_setpindir+0x88>
 250:	82 2b       	or	r24, r18
 252:	84 bb       	out	0x14, r24	; 20
 254:	08 95       	ret
 256:	24 b3       	in	r18, 0x14	; 20
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_setpindir+0xa2>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_setpindir+0x9e>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	84 bb       	out	0x14, r24	; 20
 26c:	08 95       	ret
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	59 f4       	brne	.+22     	; 0x288 <DIO_setpindir+0xc8>
 272:	21 b3       	in	r18, 0x11	; 17
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_setpindir+0xbe>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_setpindir+0xba>
 282:	82 2b       	or	r24, r18
 284:	81 bb       	out	0x11, r24	; 17
 286:	08 95       	ret
 288:	21 b3       	in	r18, 0x11	; 17
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_setpindir+0xd4>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_setpindir+0xd0>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	81 bb       	out	0x11, r24	; 17
 29e:	08 95       	ret

000002a0 <DIO_write>:
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	e1 54       	subi	r30, 0x41	; 65
 2a6:	f1 09       	sbc	r31, r1
 2a8:	e4 32       	cpi	r30, 0x24	; 36
 2aa:	f1 05       	cpc	r31, r1
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <DIO_write+0x10>
 2ae:	67 c0       	rjmp	.+206    	; 0x37e <DIO_write+0xde>
 2b0:	e2 5b       	subi	r30, 0xB2	; 178
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__tablejump2__>
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	59 f4       	brne	.+22     	; 0x2d2 <DIO_write+0x32>
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x28>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x24>
 2cc:	82 2b       	or	r24, r18
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	08 95       	ret
 2d2:	2b b3       	in	r18, 0x1b	; 27
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_write+0x3e>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_write+0x3a>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	8b bb       	out	0x1b, r24	; 27
 2e8:	08 95       	ret
 2ea:	41 30       	cpi	r20, 0x01	; 1
 2ec:	59 f4       	brne	.+22     	; 0x304 <DIO_write+0x64>
 2ee:	28 b3       	in	r18, 0x18	; 24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_write+0x5a>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_write+0x56>
 2fe:	82 2b       	or	r24, r18
 300:	88 bb       	out	0x18, r24	; 24
 302:	08 95       	ret
 304:	28 b3       	in	r18, 0x18	; 24
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_write+0x70>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_write+0x6c>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	88 bb       	out	0x18, r24	; 24
 31a:	08 95       	ret
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	59 f4       	brne	.+22     	; 0x336 <DIO_write+0x96>
 320:	25 b3       	in	r18, 0x15	; 21
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_write+0x8c>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_write+0x88>
 330:	82 2b       	or	r24, r18
 332:	85 bb       	out	0x15, r24	; 21
 334:	08 95       	ret
 336:	25 b3       	in	r18, 0x15	; 21
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_write+0xa2>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_write+0x9e>
 346:	80 95       	com	r24
 348:	82 23       	and	r24, r18
 34a:	85 bb       	out	0x15, r24	; 21
 34c:	08 95       	ret
 34e:	41 30       	cpi	r20, 0x01	; 1
 350:	59 f4       	brne	.+22     	; 0x368 <DIO_write+0xc8>
 352:	22 b3       	in	r18, 0x12	; 18
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_write+0xbe>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_write+0xba>
 362:	82 2b       	or	r24, r18
 364:	82 bb       	out	0x12, r24	; 18
 366:	08 95       	ret
 368:	22 b3       	in	r18, 0x12	; 18
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_write+0xd4>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_write+0xd0>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	82 bb       	out	0x12, r24	; 18
 37e:	08 95       	ret

00000380 <DIO_read>:
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	e1 54       	subi	r30, 0x41	; 65
 386:	f1 09       	sbc	r31, r1
 388:	e4 32       	cpi	r30, 0x24	; 36
 38a:	f1 05       	cpc	r31, r1
 38c:	08 f0       	brcs	.+2      	; 0x390 <DIO_read+0x10>
 38e:	4c c0       	rjmp	.+152    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 390:	ee 58       	subi	r30, 0x8E	; 142
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__tablejump2__>
 398:	29 b3       	in	r18, 0x19	; 25
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	06 2e       	mov	r0, r22
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_read+0x26>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_read+0x22>
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	82 23       	and	r24, r18
 3ae:	93 23       	and	r25, r19
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_read+0x36>
 3b2:	95 95       	asr	r25
 3b4:	87 95       	ror	r24
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_read+0x32>
 3ba:	08 95       	ret
 3bc:	26 b3       	in	r18, 0x16	; 22
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	06 2e       	mov	r0, r22
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_read+0x4a>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_read+0x46>
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	82 23       	and	r24, r18
 3d2:	93 23       	and	r25, r19
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_read+0x5a>
 3d6:	95 95       	asr	r25
 3d8:	87 95       	ror	r24
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_read+0x56>
 3de:	08 95       	ret
 3e0:	23 b3       	in	r18, 0x13	; 19
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	06 2e       	mov	r0, r22
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_read+0x6e>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_read+0x6a>
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	82 23       	and	r24, r18
 3f6:	93 23       	and	r25, r19
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_read+0x7e>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_read+0x7a>
 402:	08 95       	ret
 404:	20 b3       	in	r18, 0x10	; 16
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	06 2e       	mov	r0, r22
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	82 23       	and	r24, r18
 41a:	93 23       	and	r25, r19
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	95 95       	asr	r25
 420:	87 95       	ror	r24
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	08 95       	ret
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret

0000042c <DIO_connectPullUp>:
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	e1 54       	subi	r30, 0x41	; 65
 432:	f1 09       	sbc	r31, r1
 434:	e4 32       	cpi	r30, 0x24	; 36
 436:	f1 05       	cpc	r31, r1
 438:	08 f0       	brcs	.+2      	; 0x43c <DIO_connectPullUp+0x10>
 43a:	67 c0       	rjmp	.+206    	; 0x50a <DIO_connectPullUp+0xde>
 43c:	ea 56       	subi	r30, 0x6A	; 106
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__tablejump2__>
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	59 f4       	brne	.+22     	; 0x45e <DIO_connectPullUp+0x32>
 448:	2b b3       	in	r18, 0x1b	; 27
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_connectPullUp+0x28>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_connectPullUp+0x24>
 458:	82 2b       	or	r24, r18
 45a:	8b bb       	out	0x1b, r24	; 27
 45c:	08 95       	ret
 45e:	2b b3       	in	r18, 0x1b	; 27
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_connectPullUp+0x3e>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_connectPullUp+0x3a>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	8b bb       	out	0x1b, r24	; 27
 474:	08 95       	ret
 476:	41 30       	cpi	r20, 0x01	; 1
 478:	59 f4       	brne	.+22     	; 0x490 <DIO_connectPullUp+0x64>
 47a:	28 b3       	in	r18, 0x18	; 24
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_connectPullUp+0x5a>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_connectPullUp+0x56>
 48a:	82 2b       	or	r24, r18
 48c:	88 bb       	out	0x18, r24	; 24
 48e:	08 95       	ret
 490:	28 b3       	in	r18, 0x18	; 24
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_connectPullUp+0x70>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_connectPullUp+0x6c>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	88 bb       	out	0x18, r24	; 24
 4a6:	08 95       	ret
 4a8:	41 30       	cpi	r20, 0x01	; 1
 4aa:	59 f4       	brne	.+22     	; 0x4c2 <DIO_connectPullUp+0x96>
 4ac:	25 b3       	in	r18, 0x15	; 21
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_connectPullUp+0x8c>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_connectPullUp+0x88>
 4bc:	82 2b       	or	r24, r18
 4be:	85 bb       	out	0x15, r24	; 21
 4c0:	08 95       	ret
 4c2:	25 b3       	in	r18, 0x15	; 21
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_connectPullUp+0xa2>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_connectPullUp+0x9e>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	85 bb       	out	0x15, r24	; 21
 4d8:	08 95       	ret
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	59 f4       	brne	.+22     	; 0x4f4 <DIO_connectPullUp+0xc8>
 4de:	22 b3       	in	r18, 0x12	; 18
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_connectPullUp+0xbe>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_connectPullUp+0xba>
 4ee:	82 2b       	or	r24, r18
 4f0:	82 bb       	out	0x12, r24	; 18
 4f2:	08 95       	ret
 4f4:	22 b3       	in	r18, 0x12	; 18
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_connectPullUp+0xd4>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_connectPullUp+0xd0>
 504:	80 95       	com	r24
 506:	82 23       	and	r24, r18
 508:	82 bb       	out	0x12, r24	; 18
 50a:	08 95       	ret

0000050c <DIO_write_low_nibble>:
		break ;
	}
}

void DIO_write_low_nibble(char port,char val){
	 val&=0x0f;
 50c:	6f 70       	andi	r22, 0x0F	; 15
	 switch(port)
 50e:	82 34       	cpi	r24, 0x42	; 66
 510:	81 f0       	breq	.+32     	; 0x532 <DIO_write_low_nibble+0x26>
 512:	18 f4       	brcc	.+6      	; 0x51a <DIO_write_low_nibble+0xe>
 514:	81 34       	cpi	r24, 0x41	; 65
 516:	31 f0       	breq	.+12     	; 0x524 <DIO_write_low_nibble+0x18>
 518:	08 95       	ret
 51a:	83 34       	cpi	r24, 0x43	; 67
 51c:	89 f0       	breq	.+34     	; 0x540 <DIO_write_low_nibble+0x34>
 51e:	84 34       	cpi	r24, 0x44	; 68
 520:	b1 f0       	breq	.+44     	; 0x54e <DIO_write_low_nibble+0x42>
 522:	08 95       	ret
	 {
		 case 'A':
		 PORTA&=0xf0;
 524:	8b b3       	in	r24, 0x1b	; 27
 526:	80 7f       	andi	r24, 0xF0	; 240
 528:	8b bb       	out	0x1b, r24	; 27
		 PORTA|=val;
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	68 2b       	or	r22, r24
 52e:	6b bb       	out	0x1b, r22	; 27
		 break;
 530:	08 95       	ret
		 case 'B':
		 PORTB&=0xf0;
 532:	88 b3       	in	r24, 0x18	; 24
 534:	80 7f       	andi	r24, 0xF0	; 240
 536:	88 bb       	out	0x18, r24	; 24
		 PORTB|=val;
 538:	88 b3       	in	r24, 0x18	; 24
 53a:	68 2b       	or	r22, r24
 53c:	68 bb       	out	0x18, r22	; 24
		 break;
 53e:	08 95       	ret
		 case 'C':
		 PORTC&=0xf0;
 540:	85 b3       	in	r24, 0x15	; 21
 542:	80 7f       	andi	r24, 0xF0	; 240
 544:	85 bb       	out	0x15, r24	; 21
		 PORTC|=val;
 546:	85 b3       	in	r24, 0x15	; 21
 548:	68 2b       	or	r22, r24
 54a:	65 bb       	out	0x15, r22	; 21
		 break;
 54c:	08 95       	ret
		 case 'D':
		 PORTD&=0xf0;
 54e:	82 b3       	in	r24, 0x12	; 18
 550:	80 7f       	andi	r24, 0xF0	; 240
 552:	82 bb       	out	0x12, r24	; 18
		 PORTD|=val;
 554:	82 b3       	in	r24, 0x12	; 18
 556:	68 2b       	or	r22, r24
 558:	62 bb       	out	0x12, r22	; 18
 55a:	08 95       	ret

0000055c <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"

void EEPROM_write(unsigned short address, unsigned char data){
	/* Set up the address register */
	EEARL = (char)address;
 55c:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(address>>8);
 55e:	9f bb       	out	0x1f, r25	; 31
	
	/* Set up the data register */
	EEDR = data;
 560:	6d bb       	out	0x1d, r22	; 29
	
	/* Write logical one to EEMWE */
	SET_BIT(EECR, EEMWE);
 562:	e2 9a       	sbi	0x1c, 2	; 28
	/* Write logical one to EEWE */
	SET_BIT(EECR, EEWE);
 564:	e1 9a       	sbi	0x1c, 1	; 28
	
	/* Checks the completion of the write operation */
	while(READ_BIT(EECR,EEWE)==1);
 566:	e1 99       	sbic	0x1c, 1	; 28
 568:	fe cf       	rjmp	.-4      	; 0x566 <EEPROM_write+0xa>
}
 56a:	08 95       	ret

0000056c <EEPROM_read>:

unsigned char EEPROM_read(const unsigned short address){
	/* Set up the address register */
	EEARL = (char)address;
 56c:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(address>>8);
 56e:	9f bb       	out	0x1f, r25	; 31
	
	/* Start the EEPROM reading by setting the EERE */
	SET_BIT(EECR, EERE);
 570:	e0 9a       	sbi	0x1c, 0	; 28
	
	/* return data from data register */
	return EEDR;
 572:	8d b3       	in	r24, 0x1d	; 29
 574:	08 95       	ret

00000576 <keypad_init>:

#include "keypad_driver.h"
#include "DIO.h"

void keypad_init(){
	DIO_setpindir('A',0,1);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	81 e4       	ldi	r24, 0x41	; 65
 57c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('A',1,1);
 580:	41 e0       	ldi	r20, 0x01	; 1
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	81 e4       	ldi	r24, 0x41	; 65
 586:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('A',2,1);
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	62 e0       	ldi	r22, 0x02	; 2
 58e:	81 e4       	ldi	r24, 0x41	; 65
 590:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('A',3,1);
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	63 e0       	ldi	r22, 0x03	; 3
 598:	81 e4       	ldi	r24, 0x41	; 65
 59a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>

	DIO_setpindir('A',4,0);
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	64 e0       	ldi	r22, 0x04	; 4
 5a2:	81 e4       	ldi	r24, 0x41	; 65
 5a4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('A',5,0);
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	65 e0       	ldi	r22, 0x05	; 5
 5ac:	81 e4       	ldi	r24, 0x41	; 65
 5ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('A',6,0);
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	66 e0       	ldi	r22, 0x06	; 6
 5b6:	81 e4       	ldi	r24, 0x41	; 65
 5b8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('A',7,0);
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	67 e0       	ldi	r22, 0x07	; 7
 5c0:	81 e4       	ldi	r24, 0x41	; 65
 5c2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>

	DIO_connectPullUp('A',4,1);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	64 e0       	ldi	r22, 0x04	; 4
 5ca:	81 e4       	ldi	r24, 0x41	; 65
 5cc:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_connectPullUp>
	DIO_connectPullUp('A',5,1);
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	65 e0       	ldi	r22, 0x05	; 5
 5d4:	81 e4       	ldi	r24, 0x41	; 65
 5d6:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_connectPullUp>
	DIO_connectPullUp('A',6,1);
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	66 e0       	ldi	r22, 0x06	; 6
 5de:	81 e4       	ldi	r24, 0x41	; 65
 5e0:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_connectPullUp>
	DIO_connectPullUp('A',7,1);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	67 e0       	ldi	r22, 0x07	; 7
 5e8:	81 e4       	ldi	r24, 0x41	; 65
 5ea:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_connectPullUp>
 5ee:	08 95       	ret

000005f0 <keypad_read>:
}

unsigned char keypad_read(){
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	60 97       	sbiw	r28, 0x10	; 16
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
	char ascii_char[4][4]={{'1','2','3','+'}, {'4','5','6','-'}, {'7','8','9','*'}, {'c','0','=','/'}};
 608:	80 e1       	ldi	r24, 0x10	; 16
 60a:	e2 e6       	ldi	r30, 0x62	; 98
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	de 01       	movw	r26, r28
 610:	11 96       	adiw	r26, 0x01	; 1
 612:	01 90       	ld	r0, Z+
 614:	0d 92       	st	X+, r0
 616:	8a 95       	dec	r24
 618:	e1 f7       	brne	.-8      	; 0x612 <keypad_read+0x22>
	char row, col, button_status; 
	char return_val = NOT_PRESSED;
	
	for(row =0;row<4;row++){
 61a:	00 e0       	ldi	r16, 0x00	; 0
		DIO_write('A',0,1);
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	81 e4       	ldi	r24, 0x41	; 65
 622:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
		DIO_write('A',1,1);
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	81 e4       	ldi	r24, 0x41	; 65
 62c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
		DIO_write('A',2,1);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	81 e4       	ldi	r24, 0x41	; 65
 636:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
		DIO_write('A',3,1);
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	63 e0       	ldi	r22, 0x03	; 3
 63e:	81 e4       	ldi	r24, 0x41	; 65
 640:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
		
		DIO_write('A',row,0);
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	60 2f       	mov	r22, r16
 648:	81 e4       	ldi	r24, 0x41	; 65
 64a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
		
		for(col = 0; col<4;col++){
 64e:	10 e0       	ldi	r17, 0x00	; 0
			button_status = DIO_read('A', (col+4));
 650:	64 e0       	ldi	r22, 0x04	; 4
 652:	61 0f       	add	r22, r17
 654:	81 e4       	ldi	r24, 0x41	; 65
 656:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_read>
			if(button_status == 0){
 65a:	81 11       	cpse	r24, r1
 65c:	0d c0       	rjmp	.+26     	; 0x678 <keypad_read+0x88>
				return_val = ascii_char[row][col];
 65e:	e1 e0       	ldi	r30, 0x01	; 1
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ec 0f       	add	r30, r28
 664:	fd 1f       	adc	r31, r29
 666:	84 e0       	ldi	r24, 0x04	; 4
 668:	08 9f       	mul	r16, r24
 66a:	e0 0d       	add	r30, r0
 66c:	f1 1d       	adc	r31, r1
 66e:	11 24       	eor	r1, r1
 670:	e1 0f       	add	r30, r17
 672:	f1 1d       	adc	r31, r1
 674:	80 81       	ld	r24, Z
 676:	07 c0       	rjmp	.+14     	; 0x686 <keypad_read+0x96>
		DIO_write('A',2,1);
		DIO_write('A',3,1);
		
		DIO_write('A',row,0);
		
		for(col = 0; col<4;col++){
 678:	1f 5f       	subi	r17, 0xFF	; 255
 67a:	14 30       	cpi	r17, 0x04	; 4
 67c:	49 f7       	brne	.-46     	; 0x650 <keypad_read+0x60>
unsigned char keypad_read(){
	char ascii_char[4][4]={{'1','2','3','+'}, {'4','5','6','-'}, {'7','8','9','*'}, {'c','0','=','/'}};
	char row, col, button_status; 
	char return_val = NOT_PRESSED;
	
	for(row =0;row<4;row++){
 67e:	0f 5f       	subi	r16, 0xFF	; 255
 680:	04 30       	cpi	r16, 0x04	; 4
 682:	61 f6       	brne	.-104    	; 0x61c <keypad_read+0x2c>
 684:	8f ef       	ldi	r24, 0xFF	; 255
		if(button_status == 0){
			break;
		}
	}
	return return_val;
 686:	60 96       	adiw	r28, 0x10	; 16
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	08 95       	ret

0000069c <enable>:
	LCD_sendCommand(ENTRY_MODE);
	_delay_ms(1);
}

void enable(void){
	DIO_write('B',EN,1);
 69c:	41 e0       	ldi	r20, 0x01	; 1
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	82 e4       	ldi	r24, 0x42	; 66
 6a2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a6:	8f e9       	ldi	r24, 0x9F	; 159
 6a8:	9f e0       	ldi	r25, 0x0F	; 15
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <enable+0xe>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <enable+0x14>
 6b0:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	82 e4       	ldi	r24, 0x42	; 66
 6b8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
 6bc:	8f e9       	ldi	r24, 0x9F	; 159
 6be:	9f e0       	ldi	r25, 0x0F	; 15
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <enable+0x24>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <enable+0x2a>
 6c6:	00 00       	nop
 6c8:	08 95       	ret

000006ca <LCD_sendCommand>:
	_delay_ms(2);
}

void LCD_sendCommand(char cmd){
 6ca:	cf 93       	push	r28
 6cc:	c8 2f       	mov	r28, r24
	DIO_write_low_nibble('D', cmd >> 4);
 6ce:	68 2f       	mov	r22, r24
 6d0:	62 95       	swap	r22
 6d2:	6f 70       	andi	r22, 0x0F	; 15
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	84 e4       	ldi	r24, 0x44	; 68
 6d8:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write_low_nibble>
	DIO_write('B', RS, 0);
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	82 e4       	ldi	r24, 0x42	; 66
 6e2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
	enable();
 6e6:	0e 94 4e 03 	call	0x69c	; 0x69c <enable>
	DIO_write_low_nibble('D', cmd);
 6ea:	6c 2f       	mov	r22, r28
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	84 e4       	ldi	r24, 0x44	; 68
 6f0:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write_low_nibble>
	DIO_write('B', RS, 0);
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	82 e4       	ldi	r24, 0x42	; 66
 6fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
	enable();
 6fe:	0e 94 4e 03 	call	0x69c	; 0x69c <enable>
 702:	8f ec       	ldi	r24, 0xCF	; 207
 704:	97 e0       	ldi	r25, 0x07	; 7
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <LCD_sendCommand+0x3c>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <LCD_sendCommand+0x42>
 70c:	00 00       	nop
	_delay_ms(1);
}
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <LCD_init>:
 712:	2f ef       	ldi	r18, 0xFF	; 255
 714:	81 ee       	ldi	r24, 0xE1	; 225
 716:	94 e0       	ldi	r25, 0x04	; 4
 718:	21 50       	subi	r18, 0x01	; 1
 71a:	80 40       	sbci	r24, 0x00	; 0
 71c:	90 40       	sbci	r25, 0x00	; 0
 71e:	e1 f7       	brne	.-8      	; 0x718 <LCD_init+0x6>
 720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_init+0x10>
 722:	00 00       	nop
// 	DIO_setpindir('A',1,1);
// 	DIO_setpindir('A',2,1);
// 	DIO_setpindir('A',3,1);

	_delay_ms(200);
	DIO_setpindir('D',0,1);
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	84 e4       	ldi	r24, 0x44	; 68
 72a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('D',1,1);
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	84 e4       	ldi	r24, 0x44	; 68
 734:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('D',2,1);
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	62 e0       	ldi	r22, 0x02	; 2
 73c:	84 e4       	ldi	r24, 0x44	; 68
 73e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('D',3,1);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	63 e0       	ldi	r22, 0x03	; 3
 746:	84 e4       	ldi	r24, 0x44	; 68
 748:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	
	DIO_setpindir('D',4,1);
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	64 e0       	ldi	r22, 0x04	; 4
 750:	84 e4       	ldi	r24, 0x44	; 68
 752:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('D',5,1);
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	84 e4       	ldi	r24, 0x44	; 68
 75c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('D',6,1);
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	66 e0       	ldi	r22, 0x06	; 6
 764:	84 e4       	ldi	r24, 0x44	; 68
 766:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('D',7,1);
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	67 e0       	ldi	r22, 0x07	; 7
 76e:	84 e4       	ldi	r24, 0x44	; 68
 770:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	
	
	DIO_setpindir('B',EN,1);
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	82 e4       	ldi	r24, 0x42	; 66
 77a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('B',RS,1);
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	82 e4       	ldi	r24, 0x42	; 66
 784:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	DIO_setpindir('B',RW,1);
 788:	41 e0       	ldi	r20, 0x01	; 1
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	82 e4       	ldi	r24, 0x42	; 66
 78e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_setpindir>
	
	DIO_write('B',RW,0);
 792:	40 e0       	ldi	r20, 0x00	; 0
 794:	62 e0       	ldi	r22, 0x02	; 2
 796:	82 e4       	ldi	r24, 0x42	; 66
 798:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
	
	LCD_sendCommand(RETURN_HOME);
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 7a2:	8f e1       	ldi	r24, 0x1F	; 31
 7a4:	9e e4       	ldi	r25, 0x4E	; 78
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <LCD_init+0x94>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <LCD_init+0x9a>
 7ac:	00 00       	nop
	_delay_ms(10);
	
	LCD_sendCommand(FOUR_BITS);
 7ae:	88 e2       	ldi	r24, 0x28	; 40
 7b0:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 7b4:	8f ec       	ldi	r24, 0xCF	; 207
 7b6:	97 e0       	ldi	r25, 0x07	; 7
 7b8:	01 97       	sbiw	r24, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_init+0xa6>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <LCD_init+0xac>
 7be:	00 00       	nop
	_delay_ms(1);
	
	LCD_sendCommand(CURSOR_ON_DISPLAN_ON);
 7c0:	8e e0       	ldi	r24, 0x0E	; 14
 7c2:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 7c6:	8f ec       	ldi	r24, 0xCF	; 207
 7c8:	97 e0       	ldi	r25, 0x07	; 7
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <LCD_init+0xb8>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <LCD_init+0xbe>
 7d0:	00 00       	nop
	_delay_ms(1);

	LCD_sendCommand(CLR_Screen);
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 7d8:	8f ec       	ldi	r24, 0xCF	; 207
 7da:	97 e0       	ldi	r25, 0x07	; 7
 7dc:	01 97       	sbiw	r24, 0x01	; 1
 7de:	f1 f7       	brne	.-4      	; 0x7dc <LCD_init+0xca>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <LCD_init+0xd0>
 7e2:	00 00       	nop
	_delay_ms(1);

	LCD_sendCommand(ENTRY_MODE);
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 7ea:	8f ec       	ldi	r24, 0xCF	; 207
 7ec:	97 e0       	ldi	r25, 0x07	; 7
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <LCD_init+0xdc>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <LCD_init+0xe2>
 7f4:	00 00       	nop
 7f6:	08 95       	ret

000007f8 <LCD_sendChar>:
	DIO_write('B', RS, 0);
	enable();
	_delay_ms(1);
}

void LCD_sendChar(char data){
 7f8:	cf 93       	push	r28
 7fa:	c8 2f       	mov	r28, r24
	DIO_write_low_nibble('D', data >> 4);
 7fc:	68 2f       	mov	r22, r24
 7fe:	62 95       	swap	r22
 800:	6f 70       	andi	r22, 0x0F	; 15
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	84 e4       	ldi	r24, 0x44	; 68
 806:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write_low_nibble>
	DIO_write('B', RS, 1);
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	61 e0       	ldi	r22, 0x01	; 1
 80e:	82 e4       	ldi	r24, 0x42	; 66
 810:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
	enable();
 814:	0e 94 4e 03 	call	0x69c	; 0x69c <enable>
	DIO_write_low_nibble('D', data);
 818:	6c 2f       	mov	r22, r28
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	84 e4       	ldi	r24, 0x44	; 68
 81e:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write_low_nibble>
	DIO_write('B', RS, 1);
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	82 e4       	ldi	r24, 0x42	; 66
 828:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
	enable();
 82c:	0e 94 4e 03 	call	0x69c	; 0x69c <enable>
 830:	8f ec       	ldi	r24, 0xCF	; 207
 832:	97 e0       	ldi	r25, 0x07	; 7
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <LCD_sendChar+0x3c>
 838:	00 c0       	rjmp	.+0      	; 0x83a <LCD_sendChar+0x42>
 83a:	00 00       	nop
	_delay_ms(1);
}
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <LCD_clearScreen>:

void LCD_clearScreen(){
	LCD_sendCommand(0x01);
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 846:	8f e1       	ldi	r24, 0x1F	; 31
 848:	9e e4       	ldi	r25, 0x4E	; 78
 84a:	01 97       	sbiw	r24, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <LCD_clearScreen+0xa>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <LCD_clearScreen+0x10>
 850:	00 00       	nop
 852:	08 95       	ret

00000854 <LCD_sendString>:
	_delay_ms(10);
}

void LCD_sendString(char *ptr){
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	ec 01       	movw	r28, r24
	while(*ptr !='\0'){
 85a:	88 81       	ld	r24, Y
 85c:	88 23       	and	r24, r24
 85e:	31 f0       	breq	.+12     	; 0x86c <__stack+0xd>
 860:	21 96       	adiw	r28, 0x01	; 1
		LCD_sendChar(*ptr);
 862:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_sendChar>
	LCD_sendCommand(0x01);
	_delay_ms(10);
}

void LCD_sendString(char *ptr){
	while(*ptr !='\0'){
 866:	89 91       	ld	r24, Y+
 868:	81 11       	cpse	r24, r1
 86a:	fb cf       	rjmp	.-10     	; 0x862 <__stack+0x3>
		LCD_sendChar(*ptr);
		ptr++;
	}
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	08 95       	ret

00000872 <LCD_moveCursor>:
// 	i++;
// }

void LCD_moveCursor(char row, char col){
	char data;
	if(row > 4 || row < 1 || col > 20 || col < 1){
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	98 0f       	add	r25, r24
 876:	94 30       	cpi	r25, 0x04	; 4
 878:	c0 f4       	brcc	.+48     	; 0x8aa <LCD_moveCursor+0x38>
 87a:	9f ef       	ldi	r25, 0xFF	; 255
 87c:	96 0f       	add	r25, r22
 87e:	94 31       	cpi	r25, 0x14	; 20
 880:	b0 f4       	brcc	.+44     	; 0x8ae <LCD_moveCursor+0x3c>
		data = 0x80;
	}
	else if(row == 1){
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	19 f4       	brne	.+6      	; 0x88c <LCD_moveCursor+0x1a>
		data= 0x80 + col - 1;
 886:	2f e7       	ldi	r18, 0x7F	; 127
 888:	26 0f       	add	r18, r22
 88a:	12 c0       	rjmp	.+36     	; 0x8b0 <LCD_moveCursor+0x3e>
	}
	else if (row == 2){
 88c:	82 30       	cpi	r24, 0x02	; 2
 88e:	19 f4       	brne	.+6      	; 0x896 <LCD_moveCursor+0x24>
		data= 0xc0 + col - 1;
 890:	2f eb       	ldi	r18, 0xBF	; 191
 892:	26 0f       	add	r18, r22
 894:	0d c0       	rjmp	.+26     	; 0x8b0 <LCD_moveCursor+0x3e>
	}
	else if (row == 3){
 896:	83 30       	cpi	r24, 0x03	; 3
 898:	19 f4       	brne	.+6      	; 0x8a0 <LCD_moveCursor+0x2e>
		data= 0x94 + col - 1;
 89a:	23 e9       	ldi	r18, 0x93	; 147
 89c:	26 0f       	add	r18, r22
 89e:	08 c0       	rjmp	.+16     	; 0x8b0 <LCD_moveCursor+0x3e>
	}
	else if (row == 4){
 8a0:	84 30       	cpi	r24, 0x04	; 4
 8a2:	31 f4       	brne	.+12     	; 0x8b0 <LCD_moveCursor+0x3e>
		data= 0xd4 + col - 1;
 8a4:	23 ed       	ldi	r18, 0xD3	; 211
 8a6:	26 0f       	add	r18, r22
 8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <LCD_moveCursor+0x3e>
// }

void LCD_moveCursor(char row, char col){
	char data;
	if(row > 4 || row < 1 || col > 20 || col < 1){
		data = 0x80;
 8aa:	20 e8       	ldi	r18, 0x80	; 128
 8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <LCD_moveCursor+0x3e>
 8ae:	20 e8       	ldi	r18, 0x80	; 128
		data= 0x94 + col - 1;
	}
	else if (row == 4){
		data= 0xd4 + col - 1;
	}
	LCD_sendCommand(data);
 8b0:	82 2f       	mov	r24, r18
 8b2:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_sendCommand>
 8b6:	8f ec       	ldi	r24, 0xCF	; 207
 8b8:	97 e0       	ldi	r25, 0x07	; 7
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <LCD_moveCursor+0x48>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <LCD_moveCursor+0x4e>
 8c0:	00 00       	nop
 8c2:	08 95       	ret

000008c4 <main>:
#include "timer_driver.h"
#include "button.h"

int main(void)
{	
	keypad_init();
 8c4:	0e 94 bb 02 	call	0x576	; 0x576 <keypad_init>
	LCD_init();
 8c8:	0e 94 89 03 	call	0x712	; 0x712 <LCD_init>
	button_init('B', 4);
 8cc:	64 e0       	ldi	r22, 0x04	; 4
 8ce:	82 e4       	ldi	r24, 0x42	; 66
 8d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <button_init>
	
	/*closeSafe();*/
	
	while(1){
		if(button_read('B',4) == 1){
 8d4:	64 e0       	ldi	r22, 0x04	; 4
 8d6:	82 e4       	ldi	r24, 0x42	; 66
 8d8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <button_read>
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	29 f4       	brne	.+10     	; 0x8ea <main+0x26>
			closeSafe();
 8e0:	0e 94 ac 05 	call	0xb58	; 0xb58 <closeSafe>
			settingPassword();
 8e4:	0e 94 67 05 	call	0xace	; 0xace <settingPassword>
 8e8:	f5 cf       	rjmp	.-22     	; 0x8d4 <main+0x10>
			
		}else{
			settingPassword();
 8ea:	0e 94 67 05 	call	0xace	; 0xace <settingPassword>
			checkPass();
 8ee:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <checkPass>
 8f2:	f0 cf       	rjmp	.-32     	; 0x8d4 <main+0x10>

000008f4 <checkPass>:
volatile char safeStatus=0;
volatile char value = DEFAULT;
volatile char flag=0, i;
volatile char tries = MAX_TRIES;

void checkPass(void){
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
	while(flag==0 && safeStatus == 0)
	{
		timer1_wave_fastPWM(1.0);
		arr[0]=arr[1]=arr[2]=arr[3]=DEFAULT;
 8fc:	cc ec       	ldi	r28, 0xCC	; 204
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	0f ef       	ldi	r16, 0xFF	; 255
volatile char value = DEFAULT;
volatile char flag=0, i;
volatile char tries = MAX_TRIES;

void checkPass(void){
	while(flag==0 && safeStatus == 0)
 902:	d7 c0       	rjmp	.+430    	; 0xab2 <checkPass+0x1be>
	{
		timer1_wave_fastPWM(1.0);
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	9f e3       	ldi	r25, 0x3F	; 63
 90c:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer1_wave_fastPWM>
		arr[0]=arr[1]=arr[2]=arr[3]=DEFAULT;
 910:	0b 83       	std	Y+3, r16	; 0x03
 912:	0a 83       	std	Y+2, r16	; 0x02
 914:	09 83       	std	Y+1, r16	; 0x01
 916:	08 83       	st	Y, r16
		LCD_clearScreen();
 918:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clearScreen>
		LCD_sendString("check pass:");
 91c:	82 e7       	ldi	r24, 0x72	; 114
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
		// For loop start
		for (i=0;i<=3;i++){
 924:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <i>
 928:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 92c:	84 30       	cpi	r24, 0x04	; 4
 92e:	08 f0       	brcs	.+2      	; 0x932 <checkPass+0x3e>
 930:	44 c0       	rjmp	.+136    	; 0x9ba <checkPass+0xc6>
			do
			{
				arr[i]=keypad_read();
 932:	10 91 d0 00 	lds	r17, 0x00D0	; 0x8000d0 <i>
 936:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <keypad_read>
 93a:	e1 2f       	mov	r30, r17
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	e4 53       	subi	r30, 0x34	; 52
 940:	ff 4f       	sbci	r31, 0xFF	; 255
 942:	80 83       	st	Z, r24
 944:	8f e4       	ldi	r24, 0x4F	; 79
 946:	93 ec       	ldi	r25, 0xC3	; 195
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	f1 f7       	brne	.-4      	; 0x948 <checkPass+0x54>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <checkPass+0x5a>
 94e:	00 00       	nop
				_delay_ms(200);
			}while (arr[i]==DEFAULT);
 950:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <i>
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	e4 53       	subi	r30, 0x34	; 52
 958:	ff 4f       	sbci	r31, 0xFF	; 255
 95a:	80 81       	ld	r24, Z
 95c:	8f 3f       	cpi	r24, 0xFF	; 255
 95e:	49 f3       	breq	.-46     	; 0x932 <checkPass+0x3e>
			LCD_sendChar(arr[i]);
 960:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <i>
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	e4 53       	subi	r30, 0x34	; 52
 968:	ff 4f       	sbci	r31, 0xFF	; 255
 96a:	80 81       	ld	r24, Z
 96c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_sendChar>
 970:	9f e9       	ldi	r25, 0x9F	; 159
 972:	26 e8       	ldi	r18, 0x86	; 134
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	91 50       	subi	r25, 0x01	; 1
 978:	20 40       	sbci	r18, 0x00	; 0
 97a:	80 40       	sbci	r24, 0x00	; 0
 97c:	e1 f7       	brne	.-8      	; 0x976 <checkPass+0x82>
 97e:	00 c0       	rjmp	.+0      	; 0x980 <checkPass+0x8c>
 980:	00 00       	nop
			_delay_ms(500);
			LCD_moveCursor(1,12+i);
 982:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <i>
 986:	64 5f       	subi	r22, 0xF4	; 244
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	0e 94 39 04 	call	0x872	; 0x872 <LCD_moveCursor>
			LCD_sendChar('*');
 98e:	8a e2       	ldi	r24, 0x2A	; 42
 990:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_sendChar>
 994:	9f e9       	ldi	r25, 0x9F	; 159
 996:	26 e8       	ldi	r18, 0x86	; 134
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	91 50       	subi	r25, 0x01	; 1
 99c:	20 40       	sbci	r18, 0x00	; 0
 99e:	80 40       	sbci	r24, 0x00	; 0
 9a0:	e1 f7       	brne	.-8      	; 0x99a <checkPass+0xa6>
 9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <checkPass+0xb0>
 9a4:	00 00       	nop
		timer1_wave_fastPWM(1.0);
		arr[0]=arr[1]=arr[2]=arr[3]=DEFAULT;
		LCD_clearScreen();
		LCD_sendString("check pass:");
		// For loop start
		for (i=0;i<=3;i++){
 9a6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <i>
 9b0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 9b4:	84 30       	cpi	r24, 0x04	; 4
 9b6:	08 f4       	brcc	.+2      	; 0x9ba <checkPass+0xc6>
 9b8:	bc cf       	rjmp	.-136    	; 0x932 <checkPass+0x3e>
			LCD_moveCursor(1,12+i);
			LCD_sendChar('*');
			_delay_ms(500);
		}// For loop end
		// Outer if start
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  \
 9ba:	81 e3       	ldi	r24, 0x31	; 49
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_read>
 9c2:	98 81       	ld	r25, Y
 9c4:	89 13       	cpse	r24, r25
 9c6:	2f c0       	rjmp	.+94     	; 0xa26 <checkPass+0x132>
		EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1] && \
 9c8:	82 e3       	ldi	r24, 0x32	; 50
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_read>
			LCD_moveCursor(1,12+i);
			LCD_sendChar('*');
			_delay_ms(500);
		}// For loop end
		// Outer if start
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  \
 9d0:	99 81       	ldd	r25, Y+1	; 0x01
 9d2:	89 13       	cpse	r24, r25
 9d4:	28 c0       	rjmp	.+80     	; 0xa26 <checkPass+0x132>
		EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1] && \
		EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2] && \
 9d6:	83 e3       	ldi	r24, 0x33	; 51
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_read>
			LCD_sendChar('*');
			_delay_ms(500);
		}// For loop end
		// Outer if start
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  \
		EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1] && \
 9de:	9a 81       	ldd	r25, Y+2	; 0x02
 9e0:	89 13       	cpse	r24, r25
 9e2:	21 c0       	rjmp	.+66     	; 0xa26 <checkPass+0x132>
		EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2] && \
		 EEPROM_read(EEPROM_PASSWORD_LOCATION4)==arr[3])
 9e4:	84 e3       	ldi	r24, 0x34	; 52
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_read>
			_delay_ms(500);
		}// For loop end
		// Outer if start
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0] &&  \
		EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1] && \
		EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2] && \
 9ec:	9b 81       	ldd	r25, Y+3	; 0x03
 9ee:	89 13       	cpse	r24, r25
 9f0:	1a c0       	rjmp	.+52     	; 0xa26 <checkPass+0x132>
		 EEPROM_read(EEPROM_PASSWORD_LOCATION4)==arr[3])
		{
			
			timer1_wave_fastPWM(2.0);
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	70 e0       	ldi	r23, 0x00	; 0
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	90 e4       	ldi	r25, 0x40	; 64
 9fa:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer1_wave_fastPWM>
			LCD_clearScreen();
 9fe:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clearScreen>
			LCD_sendString("right password");
 a02:	8e e7       	ldi	r24, 0x7E	; 126
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
			LCD_moveCursor(2,1);
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	0e 94 39 04 	call	0x872	; 0x872 <LCD_moveCursor>
			LCD_sendString("safe opened");
 a12:	8d e8       	ldi	r24, 0x8D	; 141
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
			flag=1;
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
			safeStatus = 1;
 a20:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <safeStatus>
 a24:	46 c0       	rjmp	.+140    	; 0xab2 <checkPass+0x1be>
		}// Outer if end
		// Start the outer else
		else
		{
			tries=tries-1;
 a26:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a2a:	81 50       	subi	r24, 0x01	; 1
 a2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (tries>0)
 a30:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a34:	88 23       	and	r24, r24
 a36:	21 f1       	breq	.+72     	; 0xa80 <checkPass+0x18c>
			{
				LCD_clearScreen();
 a38:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clearScreen>
				LCD_sendString("wrong password");
 a3c:	89 e9       	ldi	r24, 0x99	; 153
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
 a44:	9f e3       	ldi	r25, 0x3F	; 63
 a46:	2d e0       	ldi	r18, 0x0D	; 13
 a48:	83 e0       	ldi	r24, 0x03	; 3
 a4a:	91 50       	subi	r25, 0x01	; 1
 a4c:	20 40       	sbci	r18, 0x00	; 0
 a4e:	80 40       	sbci	r24, 0x00	; 0
 a50:	e1 f7       	brne	.-8      	; 0xa4a <checkPass+0x156>
 a52:	00 c0       	rjmp	.+0      	; 0xa54 <checkPass+0x160>
 a54:	00 00       	nop
				_delay_ms(1000);
				LCD_clearScreen();
 a56:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clearScreen>
				LCD_sendString("tries left:");
 a5a:	88 ea       	ldi	r24, 0xA8	; 168
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
				LCD_sendChar(tries+48);
 a62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 a66:	80 5d       	subi	r24, 0xD0	; 208
 a68:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_sendChar>
 a6c:	9f e3       	ldi	r25, 0x3F	; 63
 a6e:	2d e0       	ldi	r18, 0x0D	; 13
 a70:	83 e0       	ldi	r24, 0x03	; 3
 a72:	91 50       	subi	r25, 0x01	; 1
 a74:	20 40       	sbci	r18, 0x00	; 0
 a76:	80 40       	sbci	r24, 0x00	; 0
 a78:	e1 f7       	brne	.-8      	; 0xa72 <checkPass+0x17e>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <checkPass+0x188>
 a7c:	00 00       	nop
 a7e:	19 c0       	rjmp	.+50     	; 0xab2 <checkPass+0x1be>
				_delay_ms(1000);
			}
			else
			{
				LCD_clearScreen();
 a80:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clearScreen>
				timer1_wave_fastPWM(1.0);
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	70 e0       	ldi	r23, 0x00	; 0
 a88:	80 e8       	ldi	r24, 0x80	; 128
 a8a:	9f e3       	ldi	r25, 0x3F	; 63
 a8c:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer1_wave_fastPWM>
				LCD_sendString("wrong password");
 a90:	89 e9       	ldi	r24, 0x99	; 153
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
				LCD_moveCursor(2,1);
 a98:	61 e0       	ldi	r22, 0x01	; 1
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	0e 94 39 04 	call	0x872	; 0x872 <LCD_moveCursor>
				LCD_sendString("safe closed");
 aa0:	84 eb       	ldi	r24, 0xB4	; 180
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
				flag=1;
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
				safeStatus = 1;
 aae:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <safeStatus>
volatile char value = DEFAULT;
volatile char flag=0, i;
volatile char tries = MAX_TRIES;

void checkPass(void){
	while(flag==0 && safeStatus == 0)
 ab2:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 ab6:	81 11       	cpse	r24, r1
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <checkPass+0x1d0>
 aba:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <safeStatus>
 abe:	88 23       	and	r24, r24
 ac0:	09 f4       	brne	.+2      	; 0xac4 <checkPass+0x1d0>
 ac2:	20 cf       	rjmp	.-448    	; 0x904 <checkPass+0x10>
				flag=1;
				safeStatus = 1;
			}
		}// End the outer else
	} // End while
}
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	1f 91       	pop	r17
 aca:	0f 91       	pop	r16
 acc:	08 95       	ret

00000ace <settingPassword>:

void settingPassword(void){
	
	if(EEPROM_read(EEPROM_STATUS_LOCATION)==DEFAULT){
 ace:	80 e3       	ldi	r24, 0x30	; 48
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_read>
 ad6:	8f 3f       	cpi	r24, 0xFF	; 255
 ad8:	f1 f5       	brne	.+124    	; 0xb56 <settingPassword+0x88>
		LCD_sendString("SET PASS:");
 ada:	80 ec       	ldi	r24, 0xC0	; 192
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_sendString>
		for(i=0;i<=3;i++){
 ae2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <i>
 ae6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 aea:	84 30       	cpi	r24, 0x04	; 4
 aec:	78 f5       	brcc	.+94     	; 0xb4c <settingPassword+0x7e>
			do{
				value = keypad_read();
 aee:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <keypad_read>
 af2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <value>
				//_delay_ms(250);
			}while(value==DEFAULT);
 af6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <value>
 afa:	8f 3f       	cpi	r24, 0xFF	; 255
 afc:	c1 f3       	breq	.-16     	; 0xaee <settingPassword+0x20>
			LCD_sendChar(value);
 afe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <value>
 b02:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_sendChar>
 b06:	2f e9       	ldi	r18, 0x9F	; 159
 b08:	86 e8       	ldi	r24, 0x86	; 134
 b0a:	91 e0       	ldi	r25, 0x01	; 1
 b0c:	21 50       	subi	r18, 0x01	; 1
 b0e:	80 40       	sbci	r24, 0x00	; 0
 b10:	90 40       	sbci	r25, 0x00	; 0
 b12:	e1 f7       	brne	.-8      	; 0xb0c <settingPassword+0x3e>
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <settingPassword+0x48>
 b16:	00 00       	nop
			_delay_ms(500);
			LCD_moveCursor(1,10+i);
 b18:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <i>
 b1c:	66 5f       	subi	r22, 0xF6	; 246
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	0e 94 39 04 	call	0x872	; 0x872 <LCD_moveCursor>
			LCD_sendChar('*');
 b24:	8a e2       	ldi	r24, 0x2A	; 42
 b26:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <LCD_sendChar>
			EEPROM_write(EEPROM_PASSWORD_LOCATION1+i, value);
 b2a:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <value>
 b2e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	c1 96       	adiw	r24, 0x31	; 49
 b36:	0e 94 ae 02 	call	0x55c	; 0x55c <EEPROM_write>

void settingPassword(void){
	
	if(EEPROM_read(EEPROM_STATUS_LOCATION)==DEFAULT){
		LCD_sendString("SET PASS:");
		for(i=0;i<=3;i++){
 b3a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 b3e:	8f 5f       	subi	r24, 0xFF	; 255
 b40:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <i>
 b44:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <i>
 b48:	84 30       	cpi	r24, 0x04	; 4
 b4a:	88 f2       	brcs	.-94     	; 0xaee <settingPassword+0x20>
			LCD_moveCursor(1,10+i);
			LCD_sendChar('*');
			EEPROM_write(EEPROM_PASSWORD_LOCATION1+i, value);
			//_delay_ms(250);
		}
		EEPROM_write(EEPROM_STATUS_LOCATION, 0x00);
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	80 e3       	ldi	r24, 0x30	; 48
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 ae 02 	call	0x55c	; 0x55c <EEPROM_write>
 b56:	08 95       	ret

00000b58 <closeSafe>:
	}// End If
}

void closeSafe(){
	if(button_read('B', 4) == 1){
 b58:	64 e0       	ldi	r22, 0x04	; 4
 b5a:	82 e4       	ldi	r24, 0x42	; 66
 b5c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <button_read>
 b60:	81 30       	cpi	r24, 0x01	; 1
 b62:	71 f4       	brne	.+28     	; 0xb80 <closeSafe+0x28>
		timer1_wave_fastPWM(1.0);
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	70 e0       	ldi	r23, 0x00	; 0
 b68:	80 e8       	ldi	r24, 0x80	; 128
 b6a:	9f e3       	ldi	r25, 0x3F	; 63
 b6c:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer1_wave_fastPWM>
		LCD_clearScreen();
 b70:	0e 94 20 04 	call	0x840	; 0x840 <LCD_clearScreen>
		flag=0;
 b74:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__data_end>
		safeStatus = 0;
 b78:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <safeStatus>
		
		checkPass();
 b7c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <checkPass>
 b80:	08 95       	ret

00000b82 <timer1_wave_fastPWM>:
}

void timer1_wave_fastPWM(double value)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 b82:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 b84:	2f b5       	in	r18, 0x2f	; 47
 b86:	22 60       	ori	r18, 0x02	; 2
 b88:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 b8a:	2e b5       	in	r18, 0x2e	; 46
 b8c:	28 60       	ori	r18, 0x08	; 8
 b8e:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 b90:	2e b5       	in	r18, 0x2e	; 46
 b92:	20 61       	ori	r18, 0x10	; 16
 b94:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 b96:	20 e0       	ldi	r18, 0x00	; 0
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	4a e7       	ldi	r20, 0x7A	; 122
 b9c:	54 e4       	ldi	r21, 0x44	; 68
 b9e:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 ba2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fixunssfsi>
 ba6:	7b bd       	out	0x2b, r23	; 43
 ba8:	6a bd       	out	0x2a, r22	; 42
	ICR1=19999;
 baa:	8f e1       	ldi	r24, 0x1F	; 31
 bac:	9e e4       	ldi	r25, 0x4E	; 78
 bae:	97 bd       	out	0x27, r25	; 39
 bb0:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 bb2:	8e b5       	in	r24, 0x2e	; 46
 bb4:	81 60       	ori	r24, 0x01	; 1
 bb6:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 bb8:	8f b5       	in	r24, 0x2f	; 47
 bba:	80 68       	ori	r24, 0x80	; 128
 bbc:	8f bd       	out	0x2f, r24	; 47
 bbe:	08 95       	ret

00000bc0 <__fixunssfsi>:
 bc0:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fp_splitA>
 bc4:	88 f0       	brcs	.+34     	; 0xbe8 <__fixunssfsi+0x28>
 bc6:	9f 57       	subi	r25, 0x7F	; 127
 bc8:	98 f0       	brcs	.+38     	; 0xbf0 <__fixunssfsi+0x30>
 bca:	b9 2f       	mov	r27, r25
 bcc:	99 27       	eor	r25, r25
 bce:	b7 51       	subi	r27, 0x17	; 23
 bd0:	b0 f0       	brcs	.+44     	; 0xbfe <__fixunssfsi+0x3e>
 bd2:	e1 f0       	breq	.+56     	; 0xc0c <__fixunssfsi+0x4c>
 bd4:	66 0f       	add	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	1a f0       	brmi	.+6      	; 0xbe4 <__fixunssfsi+0x24>
 bde:	ba 95       	dec	r27
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__fixunssfsi+0x14>
 be2:	14 c0       	rjmp	.+40     	; 0xc0c <__fixunssfsi+0x4c>
 be4:	b1 30       	cpi	r27, 0x01	; 1
 be6:	91 f0       	breq	.+36     	; 0xc0c <__fixunssfsi+0x4c>
 be8:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_zero>
 bec:	b1 e0       	ldi	r27, 0x01	; 1
 bee:	08 95       	ret
 bf0:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_zero>
 bf4:	67 2f       	mov	r22, r23
 bf6:	78 2f       	mov	r23, r24
 bf8:	88 27       	eor	r24, r24
 bfa:	b8 5f       	subi	r27, 0xF8	; 248
 bfc:	39 f0       	breq	.+14     	; 0xc0c <__fixunssfsi+0x4c>
 bfe:	b9 3f       	cpi	r27, 0xF9	; 249
 c00:	cc f3       	brlt	.-14     	; 0xbf4 <__fixunssfsi+0x34>
 c02:	86 95       	lsr	r24
 c04:	77 95       	ror	r23
 c06:	67 95       	ror	r22
 c08:	b3 95       	inc	r27
 c0a:	d9 f7       	brne	.-10     	; 0xc02 <__fixunssfsi+0x42>
 c0c:	3e f4       	brtc	.+14     	; 0xc1c <__fixunssfsi+0x5c>
 c0e:	90 95       	com	r25
 c10:	80 95       	com	r24
 c12:	70 95       	com	r23
 c14:	61 95       	neg	r22
 c16:	7f 4f       	sbci	r23, 0xFF	; 255
 c18:	8f 4f       	sbci	r24, 0xFF	; 255
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	08 95       	ret

00000c1e <__fp_split3>:
 c1e:	57 fd       	sbrc	r21, 7
 c20:	90 58       	subi	r25, 0x80	; 128
 c22:	44 0f       	add	r20, r20
 c24:	55 1f       	adc	r21, r21
 c26:	59 f0       	breq	.+22     	; 0xc3e <__fp_splitA+0x10>
 c28:	5f 3f       	cpi	r21, 0xFF	; 255
 c2a:	71 f0       	breq	.+28     	; 0xc48 <__fp_splitA+0x1a>
 c2c:	47 95       	ror	r20

00000c2e <__fp_splitA>:
 c2e:	88 0f       	add	r24, r24
 c30:	97 fb       	bst	r25, 7
 c32:	99 1f       	adc	r25, r25
 c34:	61 f0       	breq	.+24     	; 0xc4e <__fp_splitA+0x20>
 c36:	9f 3f       	cpi	r25, 0xFF	; 255
 c38:	79 f0       	breq	.+30     	; 0xc58 <__fp_splitA+0x2a>
 c3a:	87 95       	ror	r24
 c3c:	08 95       	ret
 c3e:	12 16       	cp	r1, r18
 c40:	13 06       	cpc	r1, r19
 c42:	14 06       	cpc	r1, r20
 c44:	55 1f       	adc	r21, r21
 c46:	f2 cf       	rjmp	.-28     	; 0xc2c <__fp_split3+0xe>
 c48:	46 95       	lsr	r20
 c4a:	f1 df       	rcall	.-30     	; 0xc2e <__fp_splitA>
 c4c:	08 c0       	rjmp	.+16     	; 0xc5e <__fp_splitA+0x30>
 c4e:	16 16       	cp	r1, r22
 c50:	17 06       	cpc	r1, r23
 c52:	18 06       	cpc	r1, r24
 c54:	99 1f       	adc	r25, r25
 c56:	f1 cf       	rjmp	.-30     	; 0xc3a <__fp_splitA+0xc>
 c58:	86 95       	lsr	r24
 c5a:	71 05       	cpc	r23, r1
 c5c:	61 05       	cpc	r22, r1
 c5e:	08 94       	sec
 c60:	08 95       	ret

00000c62 <__fp_zero>:
 c62:	e8 94       	clt

00000c64 <__fp_szero>:
 c64:	bb 27       	eor	r27, r27
 c66:	66 27       	eor	r22, r22
 c68:	77 27       	eor	r23, r23
 c6a:	cb 01       	movw	r24, r22
 c6c:	97 f9       	bld	r25, 7
 c6e:	08 95       	ret

00000c70 <__mulsf3>:
 c70:	0e 94 4b 06 	call	0xc96	; 0xc96 <__mulsf3x>
 c74:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_round>
 c78:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscA>
 c7c:	38 f0       	brcs	.+14     	; 0xc8c <__mulsf3+0x1c>
 c7e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__fp_pscB>
 c82:	20 f0       	brcs	.+8      	; 0xc8c <__mulsf3+0x1c>
 c84:	95 23       	and	r25, r21
 c86:	11 f0       	breq	.+4      	; 0xc8c <__mulsf3+0x1c>
 c88:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_inf>
 c8c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_nan>
 c90:	11 24       	eor	r1, r1
 c92:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_szero>

00000c96 <__mulsf3x>:
 c96:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__fp_split3>
 c9a:	70 f3       	brcs	.-36     	; 0xc78 <__mulsf3+0x8>

00000c9c <__mulsf3_pse>:
 c9c:	95 9f       	mul	r25, r21
 c9e:	c1 f3       	breq	.-16     	; 0xc90 <__mulsf3+0x20>
 ca0:	95 0f       	add	r25, r21
 ca2:	50 e0       	ldi	r21, 0x00	; 0
 ca4:	55 1f       	adc	r21, r21
 ca6:	62 9f       	mul	r22, r18
 ca8:	f0 01       	movw	r30, r0
 caa:	72 9f       	mul	r23, r18
 cac:	bb 27       	eor	r27, r27
 cae:	f0 0d       	add	r31, r0
 cb0:	b1 1d       	adc	r27, r1
 cb2:	63 9f       	mul	r22, r19
 cb4:	aa 27       	eor	r26, r26
 cb6:	f0 0d       	add	r31, r0
 cb8:	b1 1d       	adc	r27, r1
 cba:	aa 1f       	adc	r26, r26
 cbc:	64 9f       	mul	r22, r20
 cbe:	66 27       	eor	r22, r22
 cc0:	b0 0d       	add	r27, r0
 cc2:	a1 1d       	adc	r26, r1
 cc4:	66 1f       	adc	r22, r22
 cc6:	82 9f       	mul	r24, r18
 cc8:	22 27       	eor	r18, r18
 cca:	b0 0d       	add	r27, r0
 ccc:	a1 1d       	adc	r26, r1
 cce:	62 1f       	adc	r22, r18
 cd0:	73 9f       	mul	r23, r19
 cd2:	b0 0d       	add	r27, r0
 cd4:	a1 1d       	adc	r26, r1
 cd6:	62 1f       	adc	r22, r18
 cd8:	83 9f       	mul	r24, r19
 cda:	a0 0d       	add	r26, r0
 cdc:	61 1d       	adc	r22, r1
 cde:	22 1f       	adc	r18, r18
 ce0:	74 9f       	mul	r23, r20
 ce2:	33 27       	eor	r19, r19
 ce4:	a0 0d       	add	r26, r0
 ce6:	61 1d       	adc	r22, r1
 ce8:	23 1f       	adc	r18, r19
 cea:	84 9f       	mul	r24, r20
 cec:	60 0d       	add	r22, r0
 cee:	21 1d       	adc	r18, r1
 cf0:	82 2f       	mov	r24, r18
 cf2:	76 2f       	mov	r23, r22
 cf4:	6a 2f       	mov	r22, r26
 cf6:	11 24       	eor	r1, r1
 cf8:	9f 57       	subi	r25, 0x7F	; 127
 cfa:	50 40       	sbci	r21, 0x00	; 0
 cfc:	9a f0       	brmi	.+38     	; 0xd24 <__mulsf3_pse+0x88>
 cfe:	f1 f0       	breq	.+60     	; 0xd3c <__mulsf3_pse+0xa0>
 d00:	88 23       	and	r24, r24
 d02:	4a f0       	brmi	.+18     	; 0xd16 <__mulsf3_pse+0x7a>
 d04:	ee 0f       	add	r30, r30
 d06:	ff 1f       	adc	r31, r31
 d08:	bb 1f       	adc	r27, r27
 d0a:	66 1f       	adc	r22, r22
 d0c:	77 1f       	adc	r23, r23
 d0e:	88 1f       	adc	r24, r24
 d10:	91 50       	subi	r25, 0x01	; 1
 d12:	50 40       	sbci	r21, 0x00	; 0
 d14:	a9 f7       	brne	.-22     	; 0xd00 <__mulsf3_pse+0x64>
 d16:	9e 3f       	cpi	r25, 0xFE	; 254
 d18:	51 05       	cpc	r21, r1
 d1a:	80 f0       	brcs	.+32     	; 0xd3c <__mulsf3_pse+0xa0>
 d1c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_inf>
 d20:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_szero>
 d24:	5f 3f       	cpi	r21, 0xFF	; 255
 d26:	e4 f3       	brlt	.-8      	; 0xd20 <__mulsf3_pse+0x84>
 d28:	98 3e       	cpi	r25, 0xE8	; 232
 d2a:	d4 f3       	brlt	.-12     	; 0xd20 <__mulsf3_pse+0x84>
 d2c:	86 95       	lsr	r24
 d2e:	77 95       	ror	r23
 d30:	67 95       	ror	r22
 d32:	b7 95       	ror	r27
 d34:	f7 95       	ror	r31
 d36:	e7 95       	ror	r30
 d38:	9f 5f       	subi	r25, 0xFF	; 255
 d3a:	c1 f7       	brne	.-16     	; 0xd2c <__mulsf3_pse+0x90>
 d3c:	fe 2b       	or	r31, r30
 d3e:	88 0f       	add	r24, r24
 d40:	91 1d       	adc	r25, r1
 d42:	96 95       	lsr	r25
 d44:	87 95       	ror	r24
 d46:	97 f9       	bld	r25, 7
 d48:	08 95       	ret

00000d4a <__fp_inf>:
 d4a:	97 f9       	bld	r25, 7
 d4c:	9f 67       	ori	r25, 0x7F	; 127
 d4e:	80 e8       	ldi	r24, 0x80	; 128
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	60 e0       	ldi	r22, 0x00	; 0
 d54:	08 95       	ret

00000d56 <__fp_nan>:
 d56:	9f ef       	ldi	r25, 0xFF	; 255
 d58:	80 ec       	ldi	r24, 0xC0	; 192
 d5a:	08 95       	ret

00000d5c <__fp_pscA>:
 d5c:	00 24       	eor	r0, r0
 d5e:	0a 94       	dec	r0
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	09 06       	cpc	r0, r25
 d68:	08 95       	ret

00000d6a <__fp_pscB>:
 d6a:	00 24       	eor	r0, r0
 d6c:	0a 94       	dec	r0
 d6e:	12 16       	cp	r1, r18
 d70:	13 06       	cpc	r1, r19
 d72:	14 06       	cpc	r1, r20
 d74:	05 06       	cpc	r0, r21
 d76:	08 95       	ret

00000d78 <__fp_round>:
 d78:	09 2e       	mov	r0, r25
 d7a:	03 94       	inc	r0
 d7c:	00 0c       	add	r0, r0
 d7e:	11 f4       	brne	.+4      	; 0xd84 <__fp_round+0xc>
 d80:	88 23       	and	r24, r24
 d82:	52 f0       	brmi	.+20     	; 0xd98 <__fp_round+0x20>
 d84:	bb 0f       	add	r27, r27
 d86:	40 f4       	brcc	.+16     	; 0xd98 <__fp_round+0x20>
 d88:	bf 2b       	or	r27, r31
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__fp_round+0x18>
 d8c:	60 ff       	sbrs	r22, 0
 d8e:	04 c0       	rjmp	.+8      	; 0xd98 <__fp_round+0x20>
 d90:	6f 5f       	subi	r22, 0xFF	; 255
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	08 95       	ret

00000d9a <__tablejump2__>:
 d9a:	ee 0f       	add	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	05 90       	lpm	r0, Z+
 da0:	f4 91       	lpm	r31, Z
 da2:	e0 2d       	mov	r30, r0
 da4:	09 94       	ijmp

00000da6 <_exit>:
 da6:	f8 94       	cli

00000da8 <__stop_program>:
 da8:	ff cf       	rjmp	.-2      	; 0xda8 <__stop_program>
